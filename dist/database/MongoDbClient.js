"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _mongoose = _interopRequireDefault(require("mongoose"));
var _uuid = require("uuid");

var _OAuthUser = _interopRequireDefault(require("./models/OAuthUser"));
var _OAuthClient = _interopRequireDefault(require("./models/OAuthClient"));
var _SocialLogin = _interopRequireDefault(require("./models/SocialLogin"));
var _LoginTypeBase = _interopRequireDefault(require("./models/login-type/LoginTypeBase"));
var _PasswordLoginType = _interopRequireDefault(require("./models/login-type/PasswordLoginType"));
var _FaceLoginType = _interopRequireDefault(require("./models/login-type/FaceLoginType"));
var _PalmLoginType = _interopRequireDefault(require("./models/login-type/PalmLoginType"));
var _crypto = _interopRequireDefault(require("crypto"));
var _TextLoginType = _interopRequireDefault(require("./models/login-type/TextLoginType"));
var _SecurityQuestionsLoginType = _interopRequireDefault(require("./models/login-type/SecurityQuestionsLoginType"));

const REQUIRED_PASSWORDS = 1;

let mongoDbOptions = {
  useUnifiedTopology: true,
  useNewUrlParser: true,
  useCreateIndex: true };


class MongoDbClient {
  constructor() {(0, _defineProperty2.default)(this, "validSecret",
























































































































































































































































































    function (password, secretSalt, secretHash) {
      if (
      password === undefined ||
      secretHash === undefined ||
      secretSalt === undefined)
      {
        return false;
      }

      var hash = _crypto.default.
      pbkdf2Sync(password, secretSalt, 10000, 512, "sha512").
      toString("hex");
      return secretHash === hash;
    });(0, _defineProperty2.default)(this, "getSecretSaltHash",

    function (password) {
      const salt = _crypto.default.randomBytes(16).toString("hex");
      const hash = _crypto.default.
      pbkdf2Sync(password, salt, 10000, 512, "sha512").
      toString("hex");

      return { salt: salt, hash: hash };
    });this.mongoURI = process.env.MONGODB_URI;_mongoose.default.connect(this.mongoURI, mongoDbOptions).then(() => {this.populateDefaultValues();});}populateDefaultValues() {var _this = this;return (0, _asyncToGenerator2.default)(function* () {let clients = yield _OAuthClient.default.find({});if (clients.length === 0) {let mypassClient = new _OAuthClient.default();let grants = [];grants.push("authorization_code");mypassClient.clientId = process.env.CLIENT_ID;mypassClient.redirectUris = process.env.REDIRECT_URI;mypassClient.grants = grants;yield mypassClient.save();}let users = yield _OAuthUser.default.find({});if (users.length === 0) {const ownerEmail = "wiyase1364@royandk.com";const caseWorkerEmail = "joxef68600@tmail15.com";let sally = { username: "owner", password: "owner", faceTemplate: "owner", email: ownerEmail, contactEmail: caseWorkerEmail, phoneNumber: "5555555555" };let billy = { username: "caseworker", password: "caseworker", faceTemplate: "caseworker", email: caseWorkerEmail };yield _this.createNewOAuthUser(sally, "sally-oauth-123");yield _this.createNewOAuthUser(billy, "billy-oauth-123");}console.log("Oauth Server Ready!");})();}createNewOAuthUser(body, uuid = undefined) {var _this2 = this;return (0, _asyncToGenerator2.default)(function* () {const user = new _OAuthUser.default();if (uuid === undefined) {user.oauthId = (0, _uuid.v4)();} else {user.oauthId = uuid;}user.username = body.username && body.username.length > 0 ? body.username : body.email;user.email = body.email; // user.contactEmail = body.contactEmail;
      user.phoneNumber = body.text;user.loginTypes = [];if (body.password !== undefined) {const passwordLoginType = new _PasswordLoginType.default();const saltHash = _this2.getSecretSaltHash(body.password);passwordLoginType.passwordSalt = saltHash.salt;passwordLoginType.passwordHash = saltHash.hash;yield passwordLoginType.save();user.loginTypes.push(passwordLoginType);}if (body.palmTemplate !== undefined) {const palmLoginType = new _PalmLoginType.default();const saltHash = _this2.getSecretSaltHash(body.palmTemplate);palmLoginType.palmGuidSalt = saltHash.salt;palmLoginType.palmGuidHash = saltHash.hash;yield palmLoginType.save();user.loginTypes.push(palmLoginType);}if (body.text !== undefined) {const textLoginType = new _TextLoginType.default();textLoginType.phoneNumber = body.text;yield textLoginType.save();user.loginTypes.push(textLoginType);}if (body.securityQuestions !== undefined) {const securityQuestionsLoginType = new _SecurityQuestionsLoginType.default();securityQuestionsLoginType.securityQuestions = JSON.parse(body.securityQuestions).map(securityQuestion => {const question = securityQuestion.question;const saltHash = _this2.getSecretSaltHash(securityQuestion.answer);return { question, answerSalt: saltHash.salt, answerHash: saltHash.hash };}); // console.log(securityQuestionsLoginType.securityQuestions);
        yield securityQuestionsLoginType.save();user.loginTypes.push(securityQuestionsLoginType);}if (body.faceTemplate !== undefined) {const faceLoginType = new _FaceLoginType.default();const saltHash = _this2.getSecretSaltHash(body.faceTemplate);faceLoginType.faceGuidSalt = saltHash.salt;faceLoginType.faceGuidHash = saltHash.hash;yield faceLoginType.save();user.loginTypes.push(faceLoginType);}yield user.save();return user;})();}createSocialLogin(requestingUserId, providingUserId, uuid) {return (0, _asyncToGenerator2.default)(function* () {const socialLogin = new _SocialLogin.default();socialLogin.uuid = uuid;socialLogin.requestingUserId = requestingUserId;socialLogin.providingUserId = providingUserId;socialLogin.timestamp = new Date();yield socialLogin.save();})();}findSocialLoginByUuid(uuid) {return (0, _asyncToGenerator2.default)(function* () {let socialLogin = yield _SocialLogin.default.findOne({ uuid: uuid });return socialLogin;})();}getUserById(id) {return (0, _asyncToGenerator2.default)(function* () {const user = yield _OAuthUser.default.findById(id);return user;})();}addOneTimeCode(userId, oneTimeCode) {return (0, _asyncToGenerator2.default)(function* () {const user = yield _OAuthUser.default.findById(userId);user.oneTimeCode = oneTimeCode;user.oneTimeCodeIssueDate = new Date();yield user.save();})();}getAllAuthAccounts() {return (0, _asyncToGenerator2.default)(function* () {const authUsers = yield _OAuthUser.default.find({});return authUsers;})();}findUserByUserName(userName) {return (0, _asyncToGenerator2.default)(function* () {if (userName) {let user = yield _OAuthUser.default.findOne({ username: userName });return user;}return undefined;})();}findUserByUsernameOrEmail(usernameOrEmail) {return (0, _asyncToGenerator2.default)(function* () {if (usernameOrEmail) {let user = yield _OAuthUser.default.findOne({ $or: [{ username: usernameOrEmail }, { email: usernameOrEmail }] });return user;}return undefined;})();}getLoginMethodsByUsernameOrEmail(usernameOrEmail) {return (0, _asyncToGenerator2.default)(function* () {let loginMethods;if (usernameOrEmail) {let user = yield _OAuthUser.default.findOne({ $or: [{ username: usernameOrEmail }, { email: usernameOrEmail }] }).populate("loginTypes");if (user) {loginMethods = user.loginTypes.map(loginType => loginType.itemtype);}}return { loginMethods };})();}saveUser(user) {return (0, _asyncToGenerator2.default)(function* () {yield user.save();return user;})();}findUserByEmail(email) {return (0, _asyncToGenerator2.default)(function* () {let user = yield _OAuthUser.default.findOne({ email: email });return user;})();} // If they are authorized to login
  getAccountByCredentials(body) {var _this3 = this;return (0, _asyncToGenerator2.default)(function* () {let user = null;if (body.username && body.username.length > 0) {user = yield _OAuthUser.default.findOne({ username: body.username }).populate("loginTypes");}if (body.email && body.email.length > 0) {user = yield _OAuthUser.default.findOne({ email: body.email }).populate("loginTypes");}if (user === null || user === undefined) {return undefined;}let successfulLoginPasswords = 0;if (user.oneTimeCode !== undefined && "" + body.oneTimeCode === "" + user.oneTimeCode) {user.oneTimeCode = undefined;yield user.save(); // TODO: Add timestamp checking
        // let now = new Date();
        // let OneDayInSeconds = 86400;
        // if (
        //   now.getTime() - oneTimeCodeIssueDate.timestamp.getTime() >
        //   OneDayInSeconds
        // ) {
        //   console.log("Expired One Time Code");
        // } else {
        //   successfulLoginPasswords++;
        // }
        successfulLoginPasswords++;}for (let loginType of user.loginTypes) {if (body.password && loginType.itemtype === "PasswordLoginType" && _this3.validSecret(body.password, loginType.passwordSalt, loginType.passwordHash)) {successfulLoginPasswords++;}if (body.faceTemplate && loginType.itemtype === "FaceLoginType" && _this3.validSecret(body.faceTemplate, loginType.faceGuidSalt, loginType.faceGuidHash)) {successfulLoginPasswords++;}}if (successfulLoginPasswords >= REQUIRED_PASSWORDS) {return user;} else {return undefined;}})();} // Helpers
}module.exports = MongoDbClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,