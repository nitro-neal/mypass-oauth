"use strict";var _interopRequireWildcard3 = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime/helpers/interopRequireWildcard"));var _react = _interopRequireWildcard3(require("react"));
var _MSelect = _interopRequireDefault(require("../../../common/MSelect"));
var _HowSvg = _interopRequireDefault(require("../../../svg/HowSvg"));
var _SecurityExampleSvg = _interopRequireDefault(require("../../../svg/SecurityExampleSvg"));
if (process.env.BROWSER) {
  Promise.resolve().then(() => (0, _interopRequireWildcard2.default)("/public/css/e18bfbb985f94998e74594b6b4706e9f.scss"));
}
class SecurityQuestionSetup extends _react.Component {
  constructor(props) {
    super(props);(0, _defineProperty2.default)(this, "isDisabled",





































































































    () => {
      const { securityItems } = { ...this.state };
      let matched = securityItems.filter(
      securityItem => securityItem.answer.length > 0 && securityItem.question);

      return matched.length < securityItems.length;
    });(0, _defineProperty2.default)(this, "getOptions",

    () => {
      const { securityItems } = { ...this.state };
      return [
      {
        value: 'streetNumGrewOn',
        label: 'What was the street number that you grew up on?',
        isDisabled: securityItems.some(
        securityItem => securityItem.question === 'streetNumGrewOn') },


      {
        value: 'cityGrewIn',
        label: 'In what town or city did you grow up in?',
        isDisabled: securityItems.some(
        securityItem => securityItem.question === 'cityGrewIn') },


      {
        value: 'primarySchool',
        label: 'What primary school did you go to?',
        isDisabled: securityItems.some(
        securityItem => securityItem.question === 'primarySchool') }];



    });let _securityItems = [{ question: undefined, answer: '' }, { question: undefined, answer: '' }, { question: undefined, answer: '' }];_securityItems = props.securityItems ? props.securityItems : _securityItems;this.state = { securityItems: _securityItems };}renderSecurityCard() {const { securityItems } = { ...this.state };const { toggleDisplayHow } = { ...this.props };return /*#__PURE__*/_react.default.createElement("div", { id: "security-questions-setup", className: "card owner1" }, /*#__PURE__*/_react.default.createElement("div", { className: "card-content" }, /*#__PURE__*/_react.default.createElement("div", { className: "card-title" }, "Security Questions"), /*#__PURE__*/_react.default.createElement("div", { className: "excerpt1" }, "Select a maximum of three preferred security questions followed by your answers"), securityItems.map((securityItem, i) => {return /*#__PURE__*/_react.default.createElement(_react.Fragment, { key: i }, /*#__PURE__*/_react.default.createElement("div", { className: "card-body-section1" }, /*#__PURE__*/_react.default.createElement("label", null, "Question #", i + 1), /*#__PURE__*/_react.default.createElement(_MSelect.default, { value: this.getOptions().find(option => option.value === securityItem.question), options: this.getOptions(), isSearcheable: false, onChange: e => {securityItem.question = e.value;this.setState({ securityItems });} })), /*#__PURE__*/_react.default.createElement("div", { className: "answer-section" }, /*#__PURE__*/_react.default.createElement("div", { className: "card-body-section1" }, /*#__PURE__*/_react.default.createElement("div", null, "Answer"), /*#__PURE__*/_react.default.createElement("input", { type: "text", value: securityItem.answer, onChange: e => {securityItem.answer = e.target.value;this.setState({ securityItems });} }))));})), /*#__PURE__*/_react.default.createElement("div", { className: "submit-section" }, /*#__PURE__*/_react.default.createElement("input", { style: { width: '210px' }, type: "button", value: "Set Questions", onClick: () => this.props.handleGoBack('owner', 10, { securityItems }), disabled: this.isDisabled() })), /*#__PURE__*/_react.default.createElement("div", { className: "how", onClick: toggleDisplayHow }, "How does this work?"));}renderHow() {return /*#__PURE__*/_react.default.createElement("div", { className: "how-container" }, /*#__PURE__*/_react.default.createElement(_HowSvg.default, { loginMethod: "securityAnswers" }), /*#__PURE__*/_react.default.createElement("div", { className: "sec-excerpt" }, "Two-step verification is a simple way to authenticate a user by sending a unique code to their mobile device."), /*#__PURE__*/_react.default.createElement(_SecurityExampleSvg.default, null));}render() {const { isDisplayHow } = { ...this.props };return !isDisplayHow ? this.renderSecurityCard() : this.renderHow();}}exports.default = SecurityQuestionSetup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,