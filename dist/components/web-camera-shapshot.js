"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _react = _interopRequireWildcard(require("react"));
var PropTypes = _interopRequireWildcard(require("prop-types"));

// NOTE: would like to do this/sort of used this as a reference at least for the web camera snapshot:
// ref: https://aralroca.com/blog/opencv-in-the-web
// We'll limit the processing size to 200px.
const maxVideoSize = 200;

class WebCameraShapshot extends _react.Component {
  constructor(props) {var _this;
    super(props);_this = this;(0, _defineProperty2.default)(this, "onClick", /*#__PURE__*/(0, _asyncToGenerator2.default)(





























































    function* () {
      const { handleSnapshot } = { ..._this.props };
      _this.setState({ processing: true });

      const ctx = _this.canvasEl.getContext('2d');
      ctx.drawImage(_this.videoElement, 0, 0, maxVideoSize, maxVideoSize);
      const image = ctx.getImageData(0, 0, maxVideoSize, maxVideoSize);
      // Load the model
      // await cv.load()
      // Processing image
      // const processedImage = await cv.imageProcessing(image)
      // Render the processed image to the canvas
      // ctx.putImageData(processedImage.data.payload, 0, 0)
      const getCanvasBlob = canvas => {
        return new Promise((resolve, reject) => {
          return canvas.toBlob(blob => {
            return resolve(blob);
          });
        });
      };
      const blob = yield getCanvasBlob(ctx.canvas);
      handleSnapshot(blob);
      _this.setState({ processing: false });
    }));this.videoElement = null;this.canvasEl = null;this.state = { processing: false };}componentDidMount() {this.load();}componentWillUnmount() {// Turns off webcam
    const stream = this.videoElement.srcObject;const tracks = stream.getTracks();tracks.forEach(function (track) {track.stop();});this.videoElement.srcObject = null;}load() {var _this2 = this;return (0, _asyncToGenerator2.default)(function* () {const videoLoaded = yield _this2.setupCamera();videoLoaded.play();return videoLoaded;})();}setupCamera() {var _this3 = this;return (0, _asyncToGenerator2.default)(function* () {_this3.videoElement.width = maxVideoSize;_this3.videoElement.height = maxVideoSize;if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {const stream = yield navigator.mediaDevices.getUserMedia({ audio: false, video: { facingMode: 'user', width: maxVideoSize, height: maxVideoSize } });_this3.videoElement.srcObject = stream;return new Promise(resolve => {_this3.videoElement.onloadedmetadata = () => {resolve(_this3.videoElement);};});}const errorMessage = 'This browser does not support video capture, or this device does not have a camera';alert(errorMessage);return Promise.reject(errorMessage);})();} /**
hat we will do in the onClick event is capture a frame within
the video to pass this image on our service.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       * What we're going to render is:

video component for the user to see what he sees on the camera.

simple button, that with the onClick we will generate an image of
the video, we will load OpenCV and we will treat the image.

canvas, which will allow us to capture the image of the video
while showing the user what image has been taken from the video after
pressing the button.

render() {const { processing } = { ...this.state };
    return /*#__PURE__*/(
      _react.default.createElement("div", {
        style: {
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          flexDirection: 'column' } }, /*#__PURE__*/


      _react.default.createElement("video", {
        className: "video",
        playsInline: true,
        ref: videoElement => {
          this.videoElement = videoElement;
        } }), /*#__PURE__*/

      _react.default.createElement("button", {
        disabled: processing,
        style: { width: maxVideoSize, padding: 10 },
        onClick: () => this.onClick() },

      processing ? 'Processing...' : 'Take a photo'), /*#__PURE__*/

      _react.default.createElement("canvas", {
        ref: canvasEl => {
          this.canvasEl = canvasEl;
        },
        width: maxVideoSize,
        height: maxVideoSize })));



  }}


WebCameraShapshot.defaultProps = {
  handleSnaphot: () => {} };


WebCameraShapshot.propTypes = {
  handleSnaphot: PropTypes.func.isRequired };var _default =


WebCameraShapshot;exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL3dlYi1jYW1lcmEtc2hhcHNob3QuanN4Il0sIm5hbWVzIjpbIm1heFZpZGVvU2l6ZSIsIldlYkNhbWVyYVNoYXBzaG90IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsImhhbmRsZVNuYXBzaG90Iiwic2V0U3RhdGUiLCJwcm9jZXNzaW5nIiwiY3R4IiwiY2FudmFzRWwiLCJnZXRDb250ZXh0IiwiZHJhd0ltYWdlIiwidmlkZW9FbGVtZW50IiwiaW1hZ2UiLCJnZXRJbWFnZURhdGEiLCJnZXRDYW52YXNCbG9iIiwiY2FudmFzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ0b0Jsb2IiLCJibG9iIiwic3RhdGUiLCJjb21wb25lbnREaWRNb3VudCIsImxvYWQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInN0cmVhbSIsInNyY09iamVjdCIsInRyYWNrcyIsImdldFRyYWNrcyIsImZvckVhY2giLCJ0cmFjayIsInN0b3AiLCJ2aWRlb0xvYWRlZCIsInNldHVwQ2FtZXJhIiwicGxheSIsIndpZHRoIiwiaGVpZ2h0IiwibmF2aWdhdG9yIiwibWVkaWFEZXZpY2VzIiwiZ2V0VXNlck1lZGlhIiwiYXVkaW8iLCJ2aWRlbyIsImZhY2luZ01vZGUiLCJvbmxvYWRlZG1ldGFkYXRhIiwiZXJyb3JNZXNzYWdlIiwiYWxlcnQiLCJyZW5kZXIiLCJkaXNwbGF5IiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwiZmxleERpcmVjdGlvbiIsInBhZGRpbmciLCJvbkNsaWNrIiwiZGVmYXVsdFByb3BzIiwiaGFuZGxlU25hcGhvdCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImZ1bmMiLCJpc1JlcXVpcmVkIl0sIm1hcHBpbmdzIjoib2RBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxZQUFZLEdBQUcsR0FBckI7O0FBRUEsTUFBTUMsaUJBQU4sU0FBZ0NDLGdCQUFoQyxDQUEwQztBQUN4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QUNqQixlQUFLQSxRQUFMLEdBQWdCQSxRQUFoQjtBQUNELFNBSEg7QUFJRSxRQUFBLEtBQUssRUFBRVQsWUFKVDtBQUtFLFFBQUEsTUFBTSxFQUFFQSxZQUxWLEdBdEJGLENBREY7Ozs7QUFnQ0QsR0F4SXVDOzs7QUEySTFDQyxpQkFBaUIsQ0FBQ3FELFlBQWxCLEdBQWlDO0FBQy9CQyxFQUFBQSxhQUFhLEVBQUUsTUFBTSxDQUFFLENBRFEsRUFBakM7OztBQUlBdEQsaUJBQWlCLENBQUN1RCxTQUFsQixHQUE4QjtBQUM1QkQsRUFBQUEsYUFBYSxFQUFFRSxTQUFTLENBQUNDLElBQVYsQ0FBZUMsVUFERixFQUE5QixDOzs7QUFJZTFELGlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuLy8gTk9URTogd291bGQgbGlrZSB0byBkbyB0aGlzL3NvcnQgb2YgdXNlZCB0aGlzIGFzIGEgcmVmZXJlbmNlIGF0IGxlYXN0IGZvciB0aGUgd2ViIGNhbWVyYSBzbmFwc2hvdDpcbi8vIHJlZjogaHR0cHM6Ly9hcmFscm9jYS5jb20vYmxvZy9vcGVuY3YtaW4tdGhlLXdlYlxuLy8gV2UnbGwgbGltaXQgdGhlIHByb2Nlc3Npbmcgc2l6ZSB0byAyMDBweC5cbmNvbnN0IG1heFZpZGVvU2l6ZSA9IDIwMDtcblxuY2xhc3MgV2ViQ2FtZXJhU2hhcHNob3QgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnZpZGVvRWxlbWVudCA9IG51bGw7XG4gICAgdGhpcy5jYW52YXNFbCA9IG51bGw7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgcHJvY2Vzc2luZzogZmFsc2UsXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubG9hZCgpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgLy8gVHVybnMgb2ZmIHdlYmNhbVxuICAgIGNvbnN0IHN0cmVhbSA9IHRoaXMudmlkZW9FbGVtZW50LnNyY09iamVjdDtcbiAgICBjb25zdCB0cmFja3MgPSBzdHJlYW0uZ2V0VHJhY2tzKCk7XG5cbiAgICB0cmFja3MuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xuICAgICAgdHJhY2suc3RvcCgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy52aWRlb0VsZW1lbnQuc3JjT2JqZWN0ID0gbnVsbDtcbiAgfVxuXG4gIGFzeW5jIGxvYWQoKSB7XG4gICAgY29uc3QgdmlkZW9Mb2FkZWQgPSBhd2FpdCB0aGlzLnNldHVwQ2FtZXJhKCk7XG4gICAgdmlkZW9Mb2FkZWQucGxheSgpO1xuICAgIHJldHVybiB2aWRlb0xvYWRlZDtcbiAgfVxuXG4gIGFzeW5jIHNldHVwQ2FtZXJhKCkge1xuICAgIHRoaXMudmlkZW9FbGVtZW50LndpZHRoID0gbWF4VmlkZW9TaXplO1xuICAgIHRoaXMudmlkZW9FbGVtZW50LmhlaWdodCA9IG1heFZpZGVvU2l6ZTtcblxuICAgIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKSB7XG4gICAgICBjb25zdCBzdHJlYW0gPSBhd2FpdCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh7XG4gICAgICAgIGF1ZGlvOiBmYWxzZSxcbiAgICAgICAgdmlkZW86IHtcbiAgICAgICAgICBmYWNpbmdNb2RlOiAndXNlcicsXG4gICAgICAgICAgd2lkdGg6IG1heFZpZGVvU2l6ZSxcbiAgICAgICAgICBoZWlnaHQ6IG1heFZpZGVvU2l6ZSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgdGhpcy52aWRlb0VsZW1lbnQuc3JjT2JqZWN0ID0gc3RyZWFtO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQub25sb2FkZWRtZXRhZGF0YSA9ICgpID0+IHtcbiAgICAgICAgICByZXNvbHZlKHRoaXMudmlkZW9FbGVtZW50KTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgJ1RoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHZpZGVvIGNhcHR1cmUsIG9yIHRoaXMgZGV2aWNlIGRvZXMgbm90IGhhdmUgYSBjYW1lcmEnO1xuICAgIGFsZXJ0KGVycm9yTWVzc2FnZSk7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yTWVzc2FnZSk7XG4gIH1cblxuICAvKipcbiAgICogV2hhdCB3ZSB3aWxsIGRvIGluIHRoZSBvbkNsaWNrIGV2ZW50IGlzIGNhcHR1cmUgYSBmcmFtZSB3aXRoaW5cbiAgICogdGhlIHZpZGVvIHRvIHBhc3MgdGhpcyBpbWFnZSBvbiBvdXIgc2VydmljZS5cbiAgICovXG4gIG9uQ2xpY2sgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qge2hhbmRsZVNuYXBzaG90fSA9IHsuLi50aGlzLnByb3BzfTtcbiAgICB0aGlzLnNldFN0YXRlKHsgcHJvY2Vzc2luZzogdHJ1ZSB9KTtcblxuICAgIGNvbnN0IGN0eCA9IHRoaXMuY2FudmFzRWwuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjdHguZHJhd0ltYWdlKHRoaXMudmlkZW9FbGVtZW50LCAwLCAwLCBtYXhWaWRlb1NpemUsIG1heFZpZGVvU2l6ZSk7XG4gICAgY29uc3QgaW1hZ2UgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIG1heFZpZGVvU2l6ZSwgbWF4VmlkZW9TaXplKTtcbiAgICAvLyBMb2FkIHRoZSBtb2RlbFxuICAgIC8vIGF3YWl0IGN2LmxvYWQoKVxuICAgIC8vIFByb2Nlc3NpbmcgaW1hZ2VcbiAgICAvLyBjb25zdCBwcm9jZXNzZWRJbWFnZSA9IGF3YWl0IGN2LmltYWdlUHJvY2Vzc2luZyhpbWFnZSlcbiAgICAvLyBSZW5kZXIgdGhlIHByb2Nlc3NlZCBpbWFnZSB0byB0aGUgY2FudmFzXG4gICAgLy8gY3R4LnB1dEltYWdlRGF0YShwcm9jZXNzZWRJbWFnZS5kYXRhLnBheWxvYWQsIDAsIDApXG4gICAgY29uc3QgZ2V0Q2FudmFzQmxvYiA9IChjYW52YXMpID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHJldHVybiBjYW52YXMudG9CbG9iKChibG9iKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoYmxvYik7XG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGJsb2IgPSBhd2FpdCBnZXRDYW52YXNCbG9iKGN0eC5jYW52YXMpO1xuICAgIGhhbmRsZVNuYXBzaG90KGJsb2IpO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBwcm9jZXNzaW5nOiBmYWxzZSB9KTtcbiAgfTtcblxuICAvKipcbiAgICogV2hhdCB3ZSdyZSBnb2luZyB0byByZW5kZXIgaXM6XG4gICAqXG4gICAqIDEuIEEgdmlkZW8gY29tcG9uZW50IGZvciB0aGUgdXNlciB0byBzZWUgd2hhdCBoZSBzZWVzIG9uIHRoZSBjYW1lcmEuXG4gICAqXG4gICAqIDIuIEEgc2ltcGxlIGJ1dHRvbiwgdGhhdCB3aXRoIHRoZSBvbkNsaWNrIHdlIHdpbGwgZ2VuZXJhdGUgYW4gaW1hZ2Ugb2ZcbiAgICogIHRoZSB2aWRlbywgd2Ugd2lsbCBsb2FkIE9wZW5DViBhbmQgd2Ugd2lsbCB0cmVhdCB0aGUgaW1hZ2UuXG4gICAqXG4gICAqIDMuIEEgY2FudmFzLCB3aGljaCB3aWxsIGFsbG93IHVzIHRvIGNhcHR1cmUgdGhlIGltYWdlIG9mIHRoZSB2aWRlb1xuICAgKiB3aGlsZSBzaG93aW5nIHRoZSB1c2VyIHdoYXQgaW1hZ2UgaGFzIGJlZW4gdGFrZW4gZnJvbSB0aGUgdmlkZW8gYWZ0ZXJcbiAgICogcHJlc3NpbmcgdGhlIGJ1dHRvbi5cbiAgICpcbiAgICovXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHByb2Nlc3NpbmcgfSA9IHsgLi4udGhpcy5zdGF0ZSB9O1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPHZpZGVvXG4gICAgICAgICAgY2xhc3NOYW1lPVwidmlkZW9cIlxuICAgICAgICAgIHBsYXlzSW5saW5lXG4gICAgICAgICAgcmVmPXsodmlkZW9FbGVtZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudCA9IHZpZGVvRWxlbWVudDtcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgZGlzYWJsZWQ9e3Byb2Nlc3Npbmd9XG4gICAgICAgICAgc3R5bGU9e3sgd2lkdGg6IG1heFZpZGVvU2l6ZSwgcGFkZGluZzogMTAgfX1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLm9uQ2xpY2soKX1cbiAgICAgICAgPlxuICAgICAgICAgIHtwcm9jZXNzaW5nID8gJ1Byb2Nlc3NpbmcuLi4nIDogJ1Rha2UgYSBwaG90byd9XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8Y2FudmFzXG4gICAgICAgICAgcmVmPXsoY2FudmFzRWwpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzRWwgPSBjYW52YXNFbDtcbiAgICAgICAgICB9fVxuICAgICAgICAgIHdpZHRoPXttYXhWaWRlb1NpemV9XG4gICAgICAgICAgaGVpZ2h0PXttYXhWaWRlb1NpemV9XG4gICAgICAgID48L2NhbnZhcz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuV2ViQ2FtZXJhU2hhcHNob3QuZGVmYXVsdFByb3BzID0ge1xuICBoYW5kbGVTbmFwaG90OiAoKSA9PiB7fVxufVxuXG5XZWJDYW1lcmFTaGFwc2hvdC5wcm9wVHlwZXMgPSB7XG4gIGhhbmRsZVNuYXBob3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFdlYkNhbWVyYVNoYXBzaG90O1xuIl19