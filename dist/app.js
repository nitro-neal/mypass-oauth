"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _dotenv = _interopRequireDefault(require("dotenv"));



var _bodyParser = _interopRequireDefault(require("body-parser"));
var _cors = _interopRequireDefault(require("cors"));

var _index = _interopRequireDefault(require("./routes/index"));
var _express = _interopRequireDefault(require("express"));
var _expressFileupload = _interopRequireDefault(require("express-fileupload"));

var _common = _interopRequireDefault(require("./common/common"));
var _MongoDbClient = _interopRequireDefault(require("./database/MongoDbClient"));
var _ejs = _interopRequireDefault(require("ejs"));
var _path = _interopRequireDefault(require("path"));_dotenv.default.config();const dbClient = new _MongoDbClient.default();

var fs = require("fs");
var https = require("https");

_common.default.dbClient = dbClient;

// https://stackoverflow.com/a/30355080/6907541
delete process.env.BROWSER;

const app = (0, _express.default)();

if (
process.env.ENVIRONMENT === "DEVELOPMENT" ||
process.env.ENVIRONMENT === "HEROKU")
{
  app.use((0, _cors.default)());
}
app.use(_bodyParser.default.json());
app.use(_bodyParser.default.urlencoded({ extended: true }));
app.use((0, _expressFileupload.default)({ useTempFiles: true }));

// View engine setup
app.set("views", _path.default.join(__dirname, "static", "views"));
app.set("view engine", "ejs");

// Middleware
app.use("/public", _express.default.static(_path.default.join(__dirname, "static", "public")));

app.use("/", _index.default);

// error handler
app.use(function (err, req, res, next) {
  console.log(err.stack);

  res.status(err.status || 500);

  res.json({
    errors: {
      message: err.message,
      error: err } });


});

const port = 5001;
let key;
let cert;
try {
  key = fs.readFileSync("/home/ubuntu/STAGING/CERTS/server-key.pem");
  cert = fs.readFileSync("/home/ubuntu/STAGING/CERTS/server-cert.pem");
} catch (err) {
  console.log("key or cert not available. Continuing... ");
}

if (key !== undefined && cert !== undefined) {
  https.
  createServer(
  {
    key: key,
    cert: cert },

  app).

  listen(port, function () {
    console.log(
    `app listening at http://localhost:${port} with https key + cert`);

  });
} else {
  app.listen(port, () =>
  console.log(`app listening at http://localhost:${port}`));

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsiZG90ZW52IiwiY29uZmlnIiwiZGJDbGllbnQiLCJNb25nb0RiQ2xpZW50IiwiZnMiLCJyZXF1aXJlIiwiaHR0cHMiLCJjb21tb24iLCJwcm9jZXNzIiwiZW52IiwiQlJPV1NFUiIsImFwcCIsIkVOVklST05NRU5UIiwidXNlIiwiYm9keVBhcnNlciIsImpzb24iLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJ1c2VUZW1wRmlsZXMiLCJzZXQiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsImV4cHJlc3MiLCJzdGF0aWMiLCJpbmRleCIsImVyciIsInJlcSIsInJlcyIsIm5leHQiLCJjb25zb2xlIiwibG9nIiwic3RhY2siLCJzdGF0dXMiLCJlcnJvcnMiLCJtZXNzYWdlIiwiZXJyb3IiLCJwb3J0Iiwia2V5IiwiY2VydCIsInJlYWRGaWxlU3luYyIsInVuZGVmaW5lZCIsImNyZWF0ZVNlcnZlciIsImxpc3RlbiJdLCJtYXBwaW5ncyI6ImtHQUFBOzs7O0FBSUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0RBYkFBLGdCQUFPQyxNQUFQLEdBRUEsTUFBTUMsUUFBUSxHQUFHLElBQUlDLHNCQUFKLEVBQWpCOztBQWFBLElBQUlDLEVBQUUsR0FBR0MsT0FBTyxDQUFDLElBQUQsQ0FBaEI7QUFDQSxJQUFJQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxPQUFELENBQW5COztBQUVBRSxnQkFBT0wsUUFBUCxHQUFrQkEsUUFBbEI7O0FBRUE7QUFDQSxPQUFPTSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsT0FBbkI7O0FBRUEsTUFBTUMsR0FBRyxHQUFHLHVCQUFaOztBQUVBO0FBQ0VILE9BQU8sQ0FBQ0MsR0FBUixDQUFZRyxXQUFaLEtBQTRCLGFBQTVCO0FBQ0FKLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRyxXQUFaLEtBQTRCLFFBRjlCO0FBR0U7QUFDQUQsRUFBQUEsR0FBRyxDQUFDRSxHQUFKLENBQVEsb0JBQVI7QUFDRDtBQUNERixHQUFHLENBQUNFLEdBQUosQ0FBUUMsb0JBQVdDLElBQVgsRUFBUjtBQUNBSixHQUFHLENBQUNFLEdBQUosQ0FBUUMsb0JBQVdFLFVBQVgsQ0FBc0IsRUFBRUMsUUFBUSxFQUFFLElBQVosRUFBdEIsQ0FBUjtBQUNBTixHQUFHLENBQUNFLEdBQUosQ0FBUSxnQ0FBVyxFQUFFSyxZQUFZLEVBQUUsSUFBaEIsRUFBWCxDQUFSOztBQUVBO0FBQ0FQLEdBQUcsQ0FBQ1EsR0FBSixDQUFRLE9BQVIsRUFBaUJDLGNBQUtDLElBQUwsQ0FBVUMsU0FBVixFQUFxQixRQUFyQixFQUErQixPQUEvQixDQUFqQjtBQUNBWCxHQUFHLENBQUNRLEdBQUosQ0FBUSxhQUFSLEVBQXVCLEtBQXZCOztBQUVBO0FBQ0FSLEdBQUcsQ0FBQ0UsR0FBSixDQUFRLFNBQVIsRUFBbUJVLGlCQUFRQyxNQUFSLENBQWVKLGNBQUtDLElBQUwsQ0FBVUMsU0FBVixFQUFxQixRQUFyQixFQUErQixRQUEvQixDQUFmLENBQW5COztBQUVBWCxHQUFHLENBQUNFLEdBQUosQ0FBUSxHQUFSLEVBQWFZLGNBQWI7O0FBRUE7QUFDQWQsR0FBRyxDQUFDRSxHQUFKLENBQVEsVUFBVWEsR0FBVixFQUFlQyxHQUFmLEVBQW9CQyxHQUFwQixFQUF5QkMsSUFBekIsRUFBK0I7QUFDckNDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTCxHQUFHLENBQUNNLEtBQWhCOztBQUVBSixFQUFBQSxHQUFHLENBQUNLLE1BQUosQ0FBV1AsR0FBRyxDQUFDTyxNQUFKLElBQWMsR0FBekI7O0FBRUFMLEVBQUFBLEdBQUcsQ0FBQ2IsSUFBSixDQUFTO0FBQ1BtQixJQUFBQSxNQUFNLEVBQUU7QUFDTkMsTUFBQUEsT0FBTyxFQUFFVCxHQUFHLENBQUNTLE9BRFA7QUFFTkMsTUFBQUEsS0FBSyxFQUFFVixHQUZELEVBREQsRUFBVDs7O0FBTUQsQ0FYRDs7QUFhQSxNQUFNVyxJQUFJLEdBQUcsSUFBYjtBQUNBLElBQUlDLEdBQUo7QUFDQSxJQUFJQyxJQUFKO0FBQ0EsSUFBSTtBQUNGRCxFQUFBQSxHQUFHLEdBQUdsQyxFQUFFLENBQUNvQyxZQUFILENBQWdCLDJDQUFoQixDQUFOO0FBQ0FELEVBQUFBLElBQUksR0FBR25DLEVBQUUsQ0FBQ29DLFlBQUgsQ0FBZ0IsNENBQWhCLENBQVA7QUFDRCxDQUhELENBR0UsT0FBT2QsR0FBUCxFQUFZO0FBQ1pJLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLDJDQUFaO0FBQ0Q7O0FBRUQsSUFBSU8sR0FBRyxLQUFLRyxTQUFSLElBQXFCRixJQUFJLEtBQUtFLFNBQWxDLEVBQTZDO0FBQzNDbkMsRUFBQUEsS0FBSztBQUNGb0MsRUFBQUEsWUFESDtBQUVJO0FBQ0VKLElBQUFBLEdBQUcsRUFBRUEsR0FEUDtBQUVFQyxJQUFBQSxJQUFJLEVBQUVBLElBRlIsRUFGSjs7QUFNSTVCLEVBQUFBLEdBTko7O0FBUUdnQyxFQUFBQSxNQVJILENBUVVOLElBUlYsRUFRZ0IsWUFBWTtBQUN4QlAsSUFBQUEsT0FBTyxDQUFDQyxHQUFSO0FBQ0cseUNBQW9DTSxJQUFLLHdCQUQ1Qzs7QUFHRCxHQVpIO0FBYUQsQ0FkRCxNQWNPO0FBQ0wxQixFQUFBQSxHQUFHLENBQUNnQyxNQUFKLENBQVdOLElBQVgsRUFBaUI7QUFDZlAsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEscUNBQW9DTSxJQUFLLEVBQXRELENBREY7O0FBR0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZG90ZW52IGZyb20gXCJkb3RlbnZcIjtcbmRvdGVudi5jb25maWcoKTtcblxuY29uc3QgZGJDbGllbnQgPSBuZXcgTW9uZ29EYkNsaWVudCgpO1xuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSBcImJvZHktcGFyc2VyXCI7XG5pbXBvcnQgY29ycyBmcm9tIFwiY29yc1wiO1xuXG5pbXBvcnQgaW5kZXggZnJvbSBcIi4vcm91dGVzL2luZGV4XCI7XG5pbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0IGZpbGVVcGxvYWQgZnJvbSBcImV4cHJlc3MtZmlsZXVwbG9hZFwiO1xuXG5pbXBvcnQgY29tbW9uIGZyb20gXCIuL2NvbW1vbi9jb21tb25cIjtcbmltcG9ydCBNb25nb0RiQ2xpZW50IGZyb20gXCIuL2RhdGFiYXNlL01vbmdvRGJDbGllbnRcIjtcbmltcG9ydCBlanMgZnJvbSBcImVqc1wiO1xuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcblxudmFyIGZzID0gcmVxdWlyZShcImZzXCIpO1xudmFyIGh0dHBzID0gcmVxdWlyZShcImh0dHBzXCIpO1xuXG5jb21tb24uZGJDbGllbnQgPSBkYkNsaWVudDtcblxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzMwMzU1MDgwLzY5MDc1NDFcbmRlbGV0ZSBwcm9jZXNzLmVudi5CUk9XU0VSO1xuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5cbmlmIChcbiAgcHJvY2Vzcy5lbnYuRU5WSVJPTk1FTlQgPT09IFwiREVWRUxPUE1FTlRcIiB8fFxuICBwcm9jZXNzLmVudi5FTlZJUk9OTUVOVCA9PT0gXCJIRVJPS1VcIlxuKSB7XG4gIGFwcC51c2UoY29ycygpKTtcbn1cbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSk7XG5hcHAudXNlKGZpbGVVcGxvYWQoeyB1c2VUZW1wRmlsZXM6IHRydWUgfSkpO1xuXG4vLyBWaWV3IGVuZ2luZSBzZXR1cFxuYXBwLnNldChcInZpZXdzXCIsIHBhdGguam9pbihfX2Rpcm5hbWUsIFwic3RhdGljXCIsIFwidmlld3NcIikpO1xuYXBwLnNldChcInZpZXcgZW5naW5lXCIsIFwiZWpzXCIpO1xuXG4vLyBNaWRkbGV3YXJlXG5hcHAudXNlKFwiL3B1YmxpY1wiLCBleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oX19kaXJuYW1lLCBcInN0YXRpY1wiLCBcInB1YmxpY1wiKSkpO1xuXG5hcHAudXNlKFwiL1wiLCBpbmRleCk7XG5cbi8vIGVycm9yIGhhbmRsZXJcbmFwcC51c2UoZnVuY3Rpb24gKGVyciwgcmVxLCByZXMsIG5leHQpIHtcbiAgY29uc29sZS5sb2coZXJyLnN0YWNrKTtcblxuICByZXMuc3RhdHVzKGVyci5zdGF0dXMgfHwgNTAwKTtcblxuICByZXMuanNvbih7XG4gICAgZXJyb3JzOiB7XG4gICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZSxcbiAgICAgIGVycm9yOiBlcnIsXG4gICAgfSxcbiAgfSk7XG59KTtcblxuY29uc3QgcG9ydCA9IDUwMDE7XG5sZXQga2V5O1xubGV0IGNlcnQ7XG50cnkge1xuICBrZXkgPSBmcy5yZWFkRmlsZVN5bmMoXCIvaG9tZS91YnVudHUvU1RBR0lORy9DRVJUUy9zZXJ2ZXIta2V5LnBlbVwiKTtcbiAgY2VydCA9IGZzLnJlYWRGaWxlU3luYyhcIi9ob21lL3VidW50dS9TVEFHSU5HL0NFUlRTL3NlcnZlci1jZXJ0LnBlbVwiKTtcbn0gY2F0Y2ggKGVycikge1xuICBjb25zb2xlLmxvZyhcImtleSBvciBjZXJ0IG5vdCBhdmFpbGFibGUuIENvbnRpbnVpbmcuLi4gXCIpO1xufVxuXG5pZiAoa2V5ICE9PSB1bmRlZmluZWQgJiYgY2VydCAhPT0gdW5kZWZpbmVkKSB7XG4gIGh0dHBzXG4gICAgLmNyZWF0ZVNlcnZlcihcbiAgICAgIHtcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIGNlcnQ6IGNlcnQsXG4gICAgICB9LFxuICAgICAgYXBwXG4gICAgKVxuICAgIC5saXN0ZW4ocG9ydCwgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgIGBhcHAgbGlzdGVuaW5nIGF0IGh0dHA6Ly9sb2NhbGhvc3Q6JHtwb3J0fSB3aXRoIGh0dHBzIGtleSArIGNlcnRgXG4gICAgICApO1xuICAgIH0pO1xufSBlbHNlIHtcbiAgYXBwLmxpc3Rlbihwb3J0LCAoKSA9PlxuICAgIGNvbnNvbGUubG9nKGBhcHAgbGlzdGVuaW5nIGF0IGh0dHA6Ly9sb2NhbGhvc3Q6JHtwb3J0fWApXG4gICk7XG59XG4iXX0=