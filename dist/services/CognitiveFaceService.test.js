"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _CognitiveFaceService = _interopRequireDefault(require("./CognitiveFaceService.js"));
var _StringUtil = _interopRequireDefault(require("../util/StringUtil.js"));
var _path = _interopRequireDefault(require("path"));
var _express = require("express");

describe("CognitiveFaceService", () => {
  it("detects faces in the image", /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
    const imageUrl =
    'https://upload.wikimedia.org/wikipedia/commons/3/37/Dagestani_man_and_woman.jpg';
    const response = yield _CognitiveFaceService.default.detectFromUrl(imageUrl);
    console.log(JSON.stringify(response));
    expect(response).toBeTruthy();
  }));

  it("detects faces in the image from data url", /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
    // console.log(__dirname); // /Users/adam/git/coa/multimodal-login/src/services
    // '/src/services/mocks/personOneFaceOne.txt'
    const imageUrl = yield _StringUtil.default.stringFromFile(_path.default.resolve("src", "services", "mocks", "personTwoFaceOne.txt"));
    // console.log(imageUrl);
    const response = yield _CognitiveFaceService.default.detectFromDataUrl(imageUrl);
    console.log(JSON.stringify(response));
    expect(response).toBeTruthy();
  }));

  it("verifies that two faces closely match", /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
    const response = yield _CognitiveFaceService.default.verifyFaceToFace("deb8e7b5-d0e9-4ac1-99c4-3d4c4bc4b209", "1aab37d9-410a-48e1-afca-eb001105a97a");
    console.log(JSON.stringify(response));
    expect(response.isIdentical).toBeTruthy();
  }));

  it("verifies that two faces don't match", /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
    const response = yield _CognitiveFaceService.default.verifyFaceToFace("deb8e7b5-d0e9-4ac1-99c4-3d4c4bc4b209", "87c8e88a-5a2f-48e6-be13-0045f98af6d1");
    console.log(JSON.stringify(response));
    expect(response.isIdentical).toBeFalsy();
  }));

  it("verifies a face to a username", /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
    const base64Image = yield _StringUtil.default.stringFromFile(_path.default.resolve("src", "services", "mocks", "personTwoFaceThree.txt"));
    const detectionResponse = yield _CognitiveFaceService.default.detectFromDataUrl(base64Image);
    console.log(detectionResponse);
    const response = yield _CognitiveFaceService.default.verifyFaceToUsername(detectionResponse[0].faceId, 'becky');
    console.log(response);
    // { isIdentical: true, confidence: 0.96075 }
  }));

  // TODO: turning of until we get db working in unit tests.
  // it("registers a face to a username", async() => {
  //   const base64Image = await StringUtil.stringFromFile(path.resolve("src", "services", "mocks", "personTwoFaceOne.txt"));
  //   const response = await CognitiveFaceService.registerFaceToUsername(base64Image, 'becky');
  //   console.log(JSON.stringify(response));
  //   // e.g.     {"persistedFaceId":"759614cb-ed70-4da6-b0d7-a23485c7b4b6"}
  // }, 10000);

  it("verifies face to username", /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
    const response = yield _CognitiveFaceService.default.verifyFaceToUsername('', 'test');
  }));

  it("gets a person group in account", /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
    const response = yield _CognitiveFaceService.default.getPersonGroup('mypasstest2');
    console.log(JSON.stringify(response));
  }));

  it("lists person groups in account", /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
    const response = yield _CognitiveFaceService.default.personGroupList();
    console.log(JSON.stringify(response));
  }), 10000);

  it("lists person groups persons in account", /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
    const response = yield _CognitiveFaceService.default.personGroupPersonList('mypasstest');
    console.log(response);
  }), 10000);

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,