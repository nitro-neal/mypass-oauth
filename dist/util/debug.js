"use strict";const levels = {
  NONE: 0,
  LOW: 1,
  MEDIUM: 2,
  HIGH: 3 };


let level = levels.HIGH;

module.exports = {
  levels,
  setLevel: l => level = l,
  log: {
    parameters: parameters => {
      if (levels.HIGH > level) return;
      console.group();
      parameters.forEach(p => console.log(`${p.name}:`, p.value));
      console.groupEnd();
    },
    functionName: name => {
      if (levels.MEDIUM > level) return;
      console.log(`\nEXECUTING: ${name}\n`);
    },
    flow: flow => {
      if (levels.LOW > level) return;
      console.log(`\n\n\nBEGIN FLOW: ${flow}\n\n\n`);
    },
    variable: ({ name, value }) => {
      if (levels.HIGH > level) return;
      console.group();
      console.group();
      console.log(`VARIABLE ${name}:`, value);
      console.groupEnd();
      console.groupEnd();
    },
    request: () => (req, res, next) => {
      if (levels.HIGH > level) return next();
      console.log("Hit URL", req.url, "with following:");
      console.group();
      console.log("Query:", req.query);
      console.log("Body:", req.body);
      console.groupEnd();
      return next();
    } } };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2RlYnVnLmpzIl0sIm5hbWVzIjpbImxldmVscyIsIk5PTkUiLCJMT1ciLCJNRURJVU0iLCJISUdIIiwibGV2ZWwiLCJtb2R1bGUiLCJleHBvcnRzIiwic2V0TGV2ZWwiLCJsIiwibG9nIiwicGFyYW1ldGVycyIsImNvbnNvbGUiLCJncm91cCIsImZvckVhY2giLCJwIiwibmFtZSIsInZhbHVlIiwiZ3JvdXBFbmQiLCJmdW5jdGlvbk5hbWUiLCJmbG93IiwidmFyaWFibGUiLCJyZXF1ZXN0IiwicmVxIiwicmVzIiwibmV4dCIsInVybCIsInF1ZXJ5IiwiYm9keSJdLCJtYXBwaW5ncyI6ImFBQUEsTUFBTUEsTUFBTSxHQUFHO0FBQ2JDLEVBQUFBLElBQUksRUFBRSxDQURPO0FBRWJDLEVBQUFBLEdBQUcsRUFBRSxDQUZRO0FBR2JDLEVBQUFBLE1BQU0sRUFBRSxDQUhLO0FBSWJDLEVBQUFBLElBQUksRUFBRSxDQUpPLEVBQWY7OztBQU9BLElBQUlDLEtBQUssR0FBR0wsTUFBTSxDQUFDSSxJQUFuQjs7QUFFQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZQLEVBQUFBLE1BRGU7QUFFZlEsRUFBQUEsUUFBUSxFQUFHQyxDQUFELElBQVFKLEtBQUssR0FBR0ksQ0FGWDtBQUdmQyxFQUFBQSxHQUFHLEVBQUU7QUFDSEMsSUFBQUEsVUFBVSxFQUFHQSxVQUFELElBQWdCO0FBQzFCLFVBQUlYLE1BQU0sQ0FBQ0ksSUFBUCxHQUFjQyxLQUFsQixFQUF5QjtBQUN6Qk8sTUFBQUEsT0FBTyxDQUFDQyxLQUFSO0FBQ0FGLE1BQUFBLFVBQVUsQ0FBQ0csT0FBWCxDQUFvQkMsQ0FBRCxJQUFPSCxPQUFPLENBQUNGLEdBQVIsQ0FBYSxHQUFFSyxDQUFDLENBQUNDLElBQUssR0FBdEIsRUFBMEJELENBQUMsQ0FBQ0UsS0FBNUIsQ0FBMUI7QUFDQUwsTUFBQUEsT0FBTyxDQUFDTSxRQUFSO0FBQ0QsS0FORTtBQU9IQyxJQUFBQSxZQUFZLEVBQUdILElBQUQsSUFBVTtBQUN0QixVQUFJaEIsTUFBTSxDQUFDRyxNQUFQLEdBQWdCRSxLQUFwQixFQUEyQjtBQUMzQk8sTUFBQUEsT0FBTyxDQUFDRixHQUFSLENBQWEsZ0JBQWVNLElBQUssSUFBakM7QUFDRCxLQVZFO0FBV0hJLElBQUFBLElBQUksRUFBR0EsSUFBRCxJQUFVO0FBQ2QsVUFBSXBCLE1BQU0sQ0FBQ0UsR0FBUCxHQUFhRyxLQUFqQixFQUF3QjtBQUN4Qk8sTUFBQUEsT0FBTyxDQUFDRixHQUFSLENBQWEscUJBQW9CVSxJQUFLLFFBQXRDO0FBQ0QsS0FkRTtBQWVIQyxJQUFBQSxRQUFRLEVBQUUsQ0FBQyxFQUFFTCxJQUFGLEVBQVFDLEtBQVIsRUFBRCxLQUFxQjtBQUM3QixVQUFJakIsTUFBTSxDQUFDSSxJQUFQLEdBQWNDLEtBQWxCLEVBQXlCO0FBQ3pCTyxNQUFBQSxPQUFPLENBQUNDLEtBQVI7QUFDQUQsTUFBQUEsT0FBTyxDQUFDQyxLQUFSO0FBQ0FELE1BQUFBLE9BQU8sQ0FBQ0YsR0FBUixDQUFhLFlBQVdNLElBQUssR0FBN0IsRUFBaUNDLEtBQWpDO0FBQ0FMLE1BQUFBLE9BQU8sQ0FBQ00sUUFBUjtBQUNBTixNQUFBQSxPQUFPLENBQUNNLFFBQVI7QUFDRCxLQXRCRTtBQXVCSEksSUFBQUEsT0FBTyxFQUFFLE1BQU0sQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQVdDLElBQVgsS0FBb0I7QUFDakMsVUFBSXpCLE1BQU0sQ0FBQ0ksSUFBUCxHQUFjQyxLQUFsQixFQUF5QixPQUFPb0IsSUFBSSxFQUFYO0FBQ3pCYixNQUFBQSxPQUFPLENBQUNGLEdBQVIsQ0FBWSxTQUFaLEVBQXVCYSxHQUFHLENBQUNHLEdBQTNCLEVBQWdDLGlCQUFoQztBQUNBZCxNQUFBQSxPQUFPLENBQUNDLEtBQVI7QUFDQUQsTUFBQUEsT0FBTyxDQUFDRixHQUFSLENBQVksUUFBWixFQUFzQmEsR0FBRyxDQUFDSSxLQUExQjtBQUNBZixNQUFBQSxPQUFPLENBQUNGLEdBQVIsQ0FBWSxPQUFaLEVBQXFCYSxHQUFHLENBQUNLLElBQXpCO0FBQ0FoQixNQUFBQSxPQUFPLENBQUNNLFFBQVI7QUFDQSxhQUFPTyxJQUFJLEVBQVg7QUFDRCxLQS9CRSxFQUhVLEVBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbGV2ZWxzID0ge1xuICBOT05FOiAwLFxuICBMT1c6IDEsXG4gIE1FRElVTTogMixcbiAgSElHSDogMyxcbn07XG5cbmxldCBsZXZlbCA9IGxldmVscy5ISUdIO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbGV2ZWxzLFxuICBzZXRMZXZlbDogKGwpID0+IChsZXZlbCA9IGwpLFxuICBsb2c6IHtcbiAgICBwYXJhbWV0ZXJzOiAocGFyYW1ldGVycykgPT4ge1xuICAgICAgaWYgKGxldmVscy5ISUdIID4gbGV2ZWwpIHJldHVybjtcbiAgICAgIGNvbnNvbGUuZ3JvdXAoKTtcbiAgICAgIHBhcmFtZXRlcnMuZm9yRWFjaCgocCkgPT4gY29uc29sZS5sb2coYCR7cC5uYW1lfTpgLCBwLnZhbHVlKSk7XG4gICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgfSxcbiAgICBmdW5jdGlvbk5hbWU6IChuYW1lKSA9PiB7XG4gICAgICBpZiAobGV2ZWxzLk1FRElVTSA+IGxldmVsKSByZXR1cm47XG4gICAgICBjb25zb2xlLmxvZyhgXFxuRVhFQ1VUSU5HOiAke25hbWV9XFxuYCk7XG4gICAgfSxcbiAgICBmbG93OiAoZmxvdykgPT4ge1xuICAgICAgaWYgKGxldmVscy5MT1cgPiBsZXZlbCkgcmV0dXJuO1xuICAgICAgY29uc29sZS5sb2coYFxcblxcblxcbkJFR0lOIEZMT1c6ICR7Zmxvd31cXG5cXG5cXG5gKTtcbiAgICB9LFxuICAgIHZhcmlhYmxlOiAoeyBuYW1lLCB2YWx1ZSB9KSA9PiB7XG4gICAgICBpZiAobGV2ZWxzLkhJR0ggPiBsZXZlbCkgcmV0dXJuO1xuICAgICAgY29uc29sZS5ncm91cCgpO1xuICAgICAgY29uc29sZS5ncm91cCgpO1xuICAgICAgY29uc29sZS5sb2coYFZBUklBQkxFICR7bmFtZX06YCwgdmFsdWUpO1xuICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgIH0sXG4gICAgcmVxdWVzdDogKCkgPT4gKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICBpZiAobGV2ZWxzLkhJR0ggPiBsZXZlbCkgcmV0dXJuIG5leHQoKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiSGl0IFVSTFwiLCByZXEudXJsLCBcIndpdGggZm9sbG93aW5nOlwiKTtcbiAgICAgIGNvbnNvbGUuZ3JvdXAoKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiUXVlcnk6XCIsIHJlcS5xdWVyeSk7XG4gICAgICBjb25zb2xlLmxvZyhcIkJvZHk6XCIsIHJlcS5ib2R5KTtcbiAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgfSxcbiAgfSxcbn07XG4iXX0=